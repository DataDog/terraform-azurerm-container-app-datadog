# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/) Copyright 2025 Datadog, Inc.

# DO NOT EDIT: This file is generated by terraform-autogen. Update the autogen_config.json file to change the generated code.

variable "container_app_environment_id" {
  type        = string
  nullable    = false
  description = <<DESCRIPTION
The ID of the Container App Environment to host this Container App.
DESCRIPTION
}

variable "max_inactive_revisions" {
  type        = number
  default     = null
  description = <<DESCRIPTION
The maximum of inactive revisions allowed for this Container App.
DESCRIPTION
}

variable "name" {
  type        = string
  nullable    = false
  description = <<DESCRIPTION
The name for this Container App.
DESCRIPTION
}

variable "resource_group_name" {
  type        = string
  nullable    = false
  description = <<DESCRIPTION
The name of the resource group in which the Container App Environment is to be created. Changing this forces a new resource to be created.
DESCRIPTION
}

variable "revision_mode" {
  type        = string
  nullable    = false
  description = <<DESCRIPTION
The revisions operational mode for the Container App. Possible values include `Single` and `Multiple`. In `Single` mode, a single revision is in operation at any given time. In `Multiple` mode, more than one revision can be active at a time and can be configured with load distribution via the `traffic_weight` block in the `ingress` configuration.
DESCRIPTION
}

variable "tags" {
  type        = map(string)
  default     = null
  description = <<DESCRIPTION
A mapping of tags to assign to the Container App.
DESCRIPTION
}

variable "workload_profile_name" {
  type        = string
  default     = null
  description = <<DESCRIPTION
The name of the Workload Profile in the Container App Environment to place this Container App.
DESCRIPTION
}

variable "dapr" {
  type = object({
    app_id       = string,
    app_port     = optional(number),
    app_protocol = optional(string)
  })
  default     = null
  description = <<DESCRIPTION
A `dapr` block as detailed below.
DESCRIPTION
}

variable "identity" {
  type = object({
    identity_ids = optional(set(string)),
    principal_id = string,
    tenant_id    = string,
    type         = string
  })
  default     = null
  description = <<DESCRIPTION
An `identity` block as detailed below.
DESCRIPTION
}

variable "ingress" {
  type = object({
    allow_insecure_connections = optional(bool),
    client_certificate_mode    = optional(string),
    custom_domain = list(object({
      certificate_binding_type = string,
      certificate_id           = string,
      name                     = string
    })),
    exposed_port     = optional(number),
    external_enabled = optional(bool),
    fqdn             = string,
    target_port      = number,
    transport        = optional(string),
    cors = optional(object({
      allow_credentials_enabled = optional(bool),
      allowed_headers           = optional(list(string)),
      allowed_methods           = optional(list(string)),
      allowed_origins           = list(string),
      exposed_headers           = optional(list(string)),
      max_age_in_seconds        = optional(number)
    })),
    ip_security_restriction = optional(list(object({
      action           = string,
      description      = optional(string),
      ip_address_range = string,
      name             = string
    }))),
    traffic_weight = list(object({
      label           = optional(string),
      latest_revision = optional(bool),
      percentage      = number,
      revision_suffix = optional(string)
    }))
  })
  default     = null
  description = <<DESCRIPTION
An `ingress` block as detailed below.
DESCRIPTION
}

variable "registry" {
  type = list(object({
    identity             = optional(string),
    password_secret_name = optional(string),
    server               = string,
    username             = optional(string)
  }))
  default     = null
  description = <<DESCRIPTION
A `registry` block as detailed below.
DESCRIPTION
}

variable "secret" {
  type = set(object({
    identity            = optional(string),
    key_vault_secret_id = optional(string),
    name                = string,
    value               = optional(string)
  }))
  default     = null
  description = <<DESCRIPTION
One or more `secret` block as detailed below.
DESCRIPTION
}

variable "template" {
  type = object({
    max_replicas                     = optional(number),
    min_replicas                     = optional(number),
    revision_suffix                  = optional(string),
    termination_grace_period_seconds = optional(number),
    azure_queue_scale_rule = optional(list(object({
      name         = string,
      queue_length = number,
      queue_name   = string,
      authentication = list(object({
        secret_name       = string,
        trigger_parameter = string
      }))
    }))),
    container = list(object({
      args    = optional(list(string)),
      command = optional(list(string)),
      cpu     = number,
      image   = string,
      memory  = string,
      name    = string,
      env = optional(list(object({
        name        = string,
        secret_name = optional(string),
        value       = optional(string)
      }))),
      liveness_probe = optional(list(object({
        failure_count_threshold = optional(number),
        host                    = optional(string),
        initial_delay           = optional(number),
        interval_seconds        = optional(number),
        path                    = optional(string),
        port                    = number,
        timeout                 = optional(number),
        transport               = string,
        header = optional(list(object({
          name  = string,
          value = string
        })))
      }))),
      readiness_probe = optional(list(object({
        failure_count_threshold = optional(number),
        host                    = optional(string),
        initial_delay           = optional(number),
        interval_seconds        = optional(number),
        path                    = optional(string),
        port                    = number,
        success_count_threshold = optional(number),
        timeout                 = optional(number),
        transport               = string,
        header = optional(list(object({
          name  = string,
          value = string
        })))
      }))),
      startup_probe = optional(list(object({
        failure_count_threshold = optional(number),
        host                    = optional(string),
        initial_delay           = optional(number),
        interval_seconds        = optional(number),
        path                    = optional(string),
        port                    = number,
        timeout                 = optional(number),
        transport               = string,
        header = optional(list(object({
          name  = string,
          value = string
        })))
      }))),
      volume_mounts = optional(list(object({
        name     = string,
        path     = string,
        sub_path = optional(string)
      })))
    })),
    custom_scale_rule = optional(list(object({
      custom_rule_type = string,
      metadata         = map(string),
      name             = string,
      authentication = optional(list(object({
        secret_name       = string,
        trigger_parameter = string
      })))
    }))),
    http_scale_rule = optional(list(object({
      concurrent_requests = string,
      name                = string,
      authentication = optional(list(object({
        secret_name       = string,
        trigger_parameter = optional(string)
      })))
    }))),
    init_container = optional(list(object({
      args    = optional(list(string)),
      command = optional(list(string)),
      cpu     = optional(number),
      image   = string,
      memory  = optional(string),
      name    = string,
      env = optional(list(object({
        name        = string,
        secret_name = optional(string),
        value       = optional(string)
      }))),
      volume_mounts = optional(list(object({
        name     = string,
        path     = string,
        sub_path = optional(string)
      })))
    }))),
    tcp_scale_rule = optional(list(object({
      concurrent_requests = string,
      name                = string,
      authentication = optional(list(object({
        secret_name       = string,
        trigger_parameter = optional(string)
      })))
    }))),
    volume = optional(list(object({
      mount_options = optional(string),
      name          = string,
      storage_name  = optional(string),
      storage_type  = optional(string)
    })))
  })
  nullable    = false
  description = <<DESCRIPTION
A `template` block as detailed below.
DESCRIPTION
}

variable "timeouts" {
  type = object({
    create = optional(string),
    delete = optional(string),
    read   = optional(string),
    update = optional(string)
  })
  default = null
}
