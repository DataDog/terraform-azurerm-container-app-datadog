# Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
# This product includes software developed at Datadog (https://www.datadoghq.com/) Copyright 2025 Datadog, Inc.

# DO NOT EDIT: This file is generated by terraform-autogen. Update the autogen_config.json file to change the generated code.

resource "azurerm_container_app" "this" {
  container_app_environment_id = var.container_app_environment_id
  max_inactive_revisions       = try(var.max_inactive_revisions, null)
  name                         = var.name
  resource_group_name          = var.resource_group_name
  revision_mode                = var.revision_mode
  tags                         = local.tags
  workload_profile_name        = try(var.workload_profile_name, null)
  dynamic "dapr" {
    for_each = try(var.dapr, null) != null ? [true] : []
    content {
      app_id       = var.dapr.app_id
      app_port     = try(var.dapr.app_port, null)
      app_protocol = try(var.dapr.app_protocol, null)
    }
  }
  dynamic "identity" {
    for_each = try(var.identity, null) != null ? [true] : []
    content {
      identity_ids = try(var.identity.identity_ids, null)
      principal_id = var.identity.principal_id
      tenant_id    = var.identity.tenant_id
      type         = var.identity.type
    }
  }
  dynamic "ingress" {
    for_each = try(var.ingress, null) != null ? [true] : []
    content {
      allow_insecure_connections = try(var.ingress.allow_insecure_connections, null)
      client_certificate_mode    = try(var.ingress.client_certificate_mode, null)
      custom_domain              = var.ingress.custom_domain
      exposed_port               = try(var.ingress.exposed_port, null)
      external_enabled           = try(var.ingress.external_enabled, null)
      fqdn                       = var.ingress.fqdn
      target_port                = var.ingress.target_port
      transport                  = try(var.ingress.transport, null)
      dynamic "cors" {
        for_each = try(var.ingress.cors, null) != null ? [true] : []
        content {
          allow_credentials_enabled = try(var.ingress.cors.allow_credentials_enabled, null)
          allowed_headers           = try(var.ingress.cors.allowed_headers, null)
          allowed_methods           = try(var.ingress.cors.allowed_methods, null)
          allowed_origins           = var.ingress.cors.allowed_origins
          exposed_headers           = try(var.ingress.cors.exposed_headers, null)
          max_age_in_seconds        = try(var.ingress.cors.max_age_in_seconds, null)
        }
      }
      dynamic "ip_security_restriction" {
        for_each = try(var.ingress.ip_security_restriction, null) != null ? var.ingress.ip_security_restriction : []
        content {
          action           = ip_security_restriction.value.action
          description      = try(ip_security_restriction.value.description, null)
          ip_address_range = ip_security_restriction.value.ip_address_range
          name             = ip_security_restriction.value.name
        }
      }
      dynamic "traffic_weight" {
        for_each = try(var.ingress.traffic_weight, null) != null ? var.ingress.traffic_weight : []
        content {
          label           = try(traffic_weight.value.label, null)
          latest_revision = try(traffic_weight.value.latest_revision, null)
          percentage      = traffic_weight.value.percentage
          revision_suffix = try(traffic_weight.value.revision_suffix, null)
        }
      }
    }
  }
  dynamic "registry" {
    for_each = try(var.registry, null) != null ? var.registry : []
    content {
      identity             = try(registry.value.identity, null)
      password_secret_name = try(registry.value.password_secret_name, null)
      server               = registry.value.server
      username             = try(registry.value.username, null)
    }
  }
  dynamic "secret" {
    for_each = try(var.secret, null) != null ? var.secret : []
    content {
      identity            = try(secret.value.identity, null)
      key_vault_secret_id = try(secret.value.key_vault_secret_id, null)
      name                = secret.value.name
      value               = try(secret.value.value, null)
    }
  }
  template {
    max_replicas                     = try(var.template.max_replicas, null)
    min_replicas                     = try(var.template.min_replicas, null)
    revision_suffix                  = try(var.template.revision_suffix, null)
    termination_grace_period_seconds = try(var.template.termination_grace_period_seconds, null)
    dynamic "azure_queue_scale_rule" {
      for_each = try(var.template.azure_queue_scale_rule, null) != null ? var.template.azure_queue_scale_rule : []
      content {
        name         = azure_queue_scale_rule.value.name
        queue_length = azure_queue_scale_rule.value.queue_length
        queue_name   = azure_queue_scale_rule.value.queue_name
        dynamic "authentication" {
          for_each = try(azure_queue_scale_rule.value.authentication, null) != null ? azure_queue_scale_rule.value.authentication : []
          content {
            secret_name       = authentication.value.secret_name
            trigger_parameter = authentication.value.trigger_parameter
          }
        }
      }
    }
    dynamic "container" {
      for_each = local.template_container
      content {
        args              = try(container.value.args, null)
        command           = try(container.value.command, null)
        cpu               = container.value.cpu
        ephemeral_storage = container.value.ephemeral_storage
        image             = container.value.image
        memory            = container.value.memory
        name              = container.value.name
        dynamic "env" {
          for_each = try(container.value.env, null) != null ? container.value.env : []
          content {
            name        = env.value.name
            secret_name = try(env.value.secret_name, null)
            value       = try(env.value.value, null)
          }
        }
        dynamic "liveness_probe" {
          for_each = try(container.value.liveness_probe, null) != null ? container.value.liveness_probe : []
          content {
            failure_count_threshold          = try(liveness_probe.value.failure_count_threshold, null)
            host                             = try(liveness_probe.value.host, null)
            initial_delay                    = try(liveness_probe.value.initial_delay, null)
            interval_seconds                 = try(liveness_probe.value.interval_seconds, null)
            path                             = try(liveness_probe.value.path, null)
            port                             = liveness_probe.value.port
            termination_grace_period_seconds = liveness_probe.value.termination_grace_period_seconds
            timeout                          = try(liveness_probe.value.timeout, null)
            transport                        = liveness_probe.value.transport
            dynamic "header" {
              for_each = try(liveness_probe.value.header, null) != null ? liveness_probe.value.header : []
              content {
                name  = header.value.name
                value = header.value.value
              }
            }
          }
        }
        dynamic "readiness_probe" {
          for_each = try(container.value.readiness_probe, null) != null ? container.value.readiness_probe : []
          content {
            failure_count_threshold = try(readiness_probe.value.failure_count_threshold, null)
            host                    = try(readiness_probe.value.host, null)
            initial_delay           = try(readiness_probe.value.initial_delay, null)
            interval_seconds        = try(readiness_probe.value.interval_seconds, null)
            path                    = try(readiness_probe.value.path, null)
            port                    = readiness_probe.value.port
            success_count_threshold = try(readiness_probe.value.success_count_threshold, null)
            timeout                 = try(readiness_probe.value.timeout, null)
            transport               = readiness_probe.value.transport
            dynamic "header" {
              for_each = try(readiness_probe.value.header, null) != null ? readiness_probe.value.header : []
              content {
                name  = header.value.name
                value = header.value.value
              }
            }
          }
        }
        dynamic "startup_probe" {
          for_each = try(container.value.startup_probe, null) != null ? container.value.startup_probe : []
          content {
            failure_count_threshold          = try(startup_probe.value.failure_count_threshold, null)
            host                             = try(startup_probe.value.host, null)
            initial_delay                    = try(startup_probe.value.initial_delay, null)
            interval_seconds                 = try(startup_probe.value.interval_seconds, null)
            path                             = try(startup_probe.value.path, null)
            port                             = startup_probe.value.port
            termination_grace_period_seconds = startup_probe.value.termination_grace_period_seconds
            timeout                          = try(startup_probe.value.timeout, null)
            transport                        = startup_probe.value.transport
            dynamic "header" {
              for_each = try(startup_probe.value.header, null) != null ? startup_probe.value.header : []
              content {
                name  = header.value.name
                value = header.value.value
              }
            }
          }
        }
        dynamic "volume_mounts" {
          for_each = try(container.value.volume_mounts, null) != null ? container.value.volume_mounts : []
          content {
            name     = volume_mounts.value.name
            path     = volume_mounts.value.path
            sub_path = try(volume_mounts.value.sub_path, null)
          }
        }
      }
    }
    dynamic "custom_scale_rule" {
      for_each = try(var.template.custom_scale_rule, null) != null ? var.template.custom_scale_rule : []
      content {
        custom_rule_type = custom_scale_rule.value.custom_rule_type
        metadata         = custom_scale_rule.value.metadata
        name             = custom_scale_rule.value.name
        dynamic "authentication" {
          for_each = try(custom_scale_rule.value.authentication, null) != null ? custom_scale_rule.value.authentication : []
          content {
            secret_name       = authentication.value.secret_name
            trigger_parameter = authentication.value.trigger_parameter
          }
        }
      }
    }
    dynamic "http_scale_rule" {
      for_each = try(var.template.http_scale_rule, null) != null ? var.template.http_scale_rule : []
      content {
        concurrent_requests = http_scale_rule.value.concurrent_requests
        name                = http_scale_rule.value.name
        dynamic "authentication" {
          for_each = try(http_scale_rule.value.authentication, null) != null ? http_scale_rule.value.authentication : []
          content {
            secret_name       = authentication.value.secret_name
            trigger_parameter = try(authentication.value.trigger_parameter, null)
          }
        }
      }
    }
    dynamic "init_container" {
      for_each = try(var.template.init_container, null) != null ? var.template.init_container : []
      content {
        args              = try(init_container.value.args, null)
        command           = try(init_container.value.command, null)
        cpu               = try(init_container.value.cpu, null)
        ephemeral_storage = init_container.value.ephemeral_storage
        image             = init_container.value.image
        memory            = try(init_container.value.memory, null)
        name              = init_container.value.name
        dynamic "env" {
          for_each = try(init_container.value.env, null) != null ? init_container.value.env : []
          content {
            name        = env.value.name
            secret_name = try(env.value.secret_name, null)
            value       = try(env.value.value, null)
          }
        }
        dynamic "volume_mounts" {
          for_each = try(init_container.value.volume_mounts, null) != null ? init_container.value.volume_mounts : []
          content {
            name     = volume_mounts.value.name
            path     = volume_mounts.value.path
            sub_path = try(volume_mounts.value.sub_path, null)
          }
        }
      }
    }
    dynamic "tcp_scale_rule" {
      for_each = try(var.template.tcp_scale_rule, null) != null ? var.template.tcp_scale_rule : []
      content {
        concurrent_requests = tcp_scale_rule.value.concurrent_requests
        name                = tcp_scale_rule.value.name
        dynamic "authentication" {
          for_each = try(tcp_scale_rule.value.authentication, null) != null ? tcp_scale_rule.value.authentication : []
          content {
            secret_name       = authentication.value.secret_name
            trigger_parameter = try(authentication.value.trigger_parameter, null)
          }
        }
      }
    }
    dynamic "volume" {
      for_each = local.template_volume
      content {
        mount_options = try(volume.value.mount_options, null)
        name          = volume.value.name
        storage_name  = try(volume.value.storage_name, null)
        storage_type  = try(volume.value.storage_type, null)
      }
    }
  }
  dynamic "timeouts" {
    for_each = try(var.timeouts, null) != null ? [true] : []
    content {
      create = try(var.timeouts.create, null)
      delete = try(var.timeouts.delete, null)
      read   = try(var.timeouts.read, null)
      update = try(var.timeouts.update, null)
    }
  }
}
